const content = document.getElementById('content');
const tabs = document.querySelectorAll('.tab-btn');

const menusData = [
  {
    id: 'r1',
    name: "The Golden Spoon",
    cuisine: "Modern European",
    categories: {
      "Starters": [
        { name: "Roasted Beet Salad", desc: "With goat cheese & walnuts", price: "6.50" },
        { name: "Smoked Salmon", desc: "On rye with dill cream", price: "8.00" },
      ],
      "Mains": [
        { name: "Grilled Ribeye", desc: "With garlic butter and fries", price: "22.00" },
        { name: "Mushroom Risotto", desc: "Creamy Arborio rice & parmesan", price: "17.50" },
      ],
      "Desserts": [
        { name: "Chocolate Lava Cake", desc: "With vanilla ice cream", price: "7.00" },
        { name: "Lemon Tart", desc: "Zesty and fresh", price: "6.00" },
      ],
    }
  },
  {
    id: 'r2',
    name: "Sushi House",
    cuisine: "Japanese",
    categories: {
      "Sushi Rolls": [
        { name: "California Roll", desc: "Crab, avocado, cucumber", price: "9.00" },
        { name: "Spicy Tuna Roll", desc: "Tuna & spicy mayo", price: "10.00" },
      ],
      "Sashimi": [
        { name: "Salmon Sashimi (5 pcs)", desc: "", price: "12.00" },
        { name: "Tuna Sashimi (5 pcs)", desc: "", price: "13.50" },
      ],
      "Drinks": [
        { name: "Green Tea", desc: "Hot or cold", price: "3.00" },
      ]
    }
  },
  {
    id: 'r3',
    name: "Pizza Palace",
    cuisine: "Italian",
    categories: {
      "Pizzas": [
        { name: "Margherita", desc: "Tomato, mozzarella, basil", price: "11.00" },
        { name: "Pepperoni", desc: "Tomato, mozzarella, pepperoni", price: "13.00" },
        { name: "Veggie", desc: "Tomato, mozzarella, veggies", price: "12.50" },
      ],
      "Salads": [
        { name: "Caesar Salad", desc: "Romaine, parmesan, croutons", price: "7.00" },
      ],
      "Desserts": [
        { name: "Tiramisu", desc: "Coffee-flavored Italian dessert", price: "6.50" },
      ]
    }
  },
  {
    id: 'r4',
    name: "Burger Barn",
    cuisine: "American",
    categories: {
      "Burgers": [
        { name: "Classic Cheeseburger", desc: "Beef patty, cheddar, lettuce", price: "9.50" },
        { name: "Bacon Burger", desc: "With crispy bacon & BBQ sauce", price: "11.00" },
        { name: "Veggie Burger", desc: "Grilled veggie patty", price: "9.00" },
      ],
      "Sides": [
        { name: "Fries", desc: "Crispy golden fries", price: "3.00" },
        { name: "Onion Rings", desc: "Deep fried", price: "3.50" },
      ],
      "Drinks": [
        { name: "Cola", desc: "Cold soft drink", price: "2.50" },
        { name: "Milkshake", desc: "Vanilla or chocolate", price: "4.00" },
      ]
    }
  },
  {
    id: 'r5',
    name: "Spice Route",
    cuisine: "Indian",
    categories: {
      "Starters": [
        { name: "Samosa", desc: "Potato & peas pastry", price: "4.00" },
        { name: "Chicken Tikka", desc: "Spiced grilled chicken", price: "6.50" },
      ],
      "Mains": [
        { name: "Butter Chicken", desc: "Creamy tomato curry", price: "14.00" },
        { name: "Vegetable Biryani", desc: "Spiced rice with veggies", price: "12.00" },
      ],
      "Breads": [
        { name: "Naan", desc: "Leavened flatbread", price: "2.50" },
        { name: "Garlic Naan", desc: "With garlic", price: "3.00" },
      ]
    }
  },
  // Add 15 more restaurants here, for brevity I add some autogenerated ones below
];

// Generate 15 more fake restaurants
for(let i=6; i<=20; i++){
  menusData.push({
    id: `r${i}`,
    name: `Restaurant ${i}`,
    cuisine: ["Thai", "Mexican", "French", "Greek", "Chinese", "Mediterranean", "Korean", "Vietnamese"][i % 8],
    categories: {
      "Starters": [
        { name: "Starter A", desc: "Delicious starter", price: "5.00" },
        { name: "Starter B", desc: "Tasty bite", price: "6.50" },
      ],
      "Mains": [
        { name: "Main Dish A", desc: "Hearty main", price: "14.00" },
        { name: "Main Dish B", desc: "Chef's special", price: "16.50" },
      ],
      "Desserts": [
        { name: "Dessert A", desc: "Sweet treat", price: "6.00" },
      ]
    }
  });
}

// --- Render Functions ---

function renderHome() {
  return `
    <section class="home-welcome">
      <h1>Welcome to Universal Menu</h1>
      <p>Your one-stop app for browsing restaurant menus instantly.</p>
    </section>
  `;
}

function renderMenuList() {
  let html = '<section class="menu-list">';
  for (const rest of menusData) {
    html += `
      <div class="menu-item" data-id="${rest.id}" tabindex="0" role="button" aria-pressed="false" aria-label="Open menu for ${rest.name}">
        <h3>${rest.name}</h3>
        <small>${rest.cuisine}</small>
      </div>
    `;
  }
  html += '</section>';
  return html;
}

function renderMenuDetail(menuId) {
  const menu = menusData.find(m => m.id === menuId);
  if (!menu) return `<p>Menu not found.</p>`;

  let html = `
    <section class="menu-detail">
      <button id="backToList" aria-label="Back to menus">&larr; Back</button>
      <h2>${menu.name}</h2>
      <small>${menu.cuisine}</small>
  `;

  for (const [category, items] of Object.entries(menu.categories)) {
    html += `<div class="menu-category">${category}</div>`;
    for (const item of items) {
      html += `
        <div class="menu-item-detail">
          <div>
            <div>${item.name}</div>
            ${item.desc ? `<div class="desc">${item.desc}</div>` : ''}
          </div>
          <div class="price">â‚¬${item.price}</div>
        </div>
      `;
    }
  }

  html += '</section>';
  return html;
}

function renderProfile() {
  return `
    <section class="profile">
      <h2>Your Profile</h2>
      <p>This is a placeholder for the user dashboard.</p>
      <p>App demo by Universal Menu.</p>
    </section>
  `;
}

// --- Tab logic ---

function setActiveTab(tabName) {
  tabs.forEach(tab => {
    const isActive = tab.dataset.tab === tabName;
    tab.classList.toggle('active', isActive);
    tab.setAttribute('aria-selected', isActive ? 'true' : 'false');
  });

  if (tabName === 'home') {
    content.innerHTML = renderHome();
  } else if (tabName === 'menus') {
    content.innerHTML = renderMenuList();
    attachMenuListEvents();
  } else if (tabName === 'profile') {
    content.innerHTML = renderProfile();
  }
}

function attachMenuListEvents() {
  const menuItems = document.querySelectorAll('.menu-item');
  menuItems.forEach(item => {
    item.addEventListener('click', () => {
      openMenuDetail(item.dataset.id);
    });
    item.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        openMenuDetail(item.dataset.id);
      }
    });
  });
}

function openMenuDetail(menuId) {
  content.innerHTML = renderMenuDetail(menuId);
  document.getElementById('backToList').addEventListener('click', () => {
    setActiveTab('menus');
  });
}

// --- Initialization ---

tabs.forEach(tab => {
  tab.addEventListener('click', () => {
    setActiveTab(tab.dataset.tab);
  });
});

// Start on home tab
setActiveTab('home');